---
interface Props {
  destination: {
    googleFormLink: string
    inputNames: {
      select: string
      name: string
      email: string
      textarea: string
    }
    autoCompletes: {
      name: string
      message?: string
    }[]
  }
}

const { destination } = Astro.props
const { googleFormLink, inputNames, autoCompletes } = destination
const turnstileSiteKey = import.meta.env.TURNSTILE_SITE_KEY
---

<script is:inline src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>

<form
  id="form"
  method="POST"
  action={googleFormLink}
  data-autocompletes={JSON.stringify(autoCompletes)}
  data-input-names={JSON.stringify(inputNames)}
>
  <div class="formChunk">
    <label for="selectLetter"> お問い合わせ内容 </label>
    <div class="radio-group" role="radiogroup" aria-required="true">
      {
        autoCompletes.map((autoComplete) => (
          <div>
            <input
              type="radio"
              name={inputNames.select}
              id={autoComplete.name}
              value={autoComplete.name}
            />
            <label for={autoComplete.name}>{autoComplete.name}</label>
          </div>
        ))
      }
    </div>
  </div>

  <div class="formChunk">
    <label for="inputName" id="nameLabel">
      <span class="js-name-text name-text">お名前</span>
    </label>
    <input type="text" name={inputNames.name} id="inputName" required />
  </div>

  <div class="formChunk">
    <label for="inputEmail"> メールアドレス </label>
    <input type="email" name={inputNames.email} id="inputEmail" required />
  </div>

  <div class="formChunk">
    <label for="textarea">
      本文
      <br />
      <span class="js-auto-complete-message" id="autoCompleteMessage"></span>
    </label>
    <textarea name={inputNames.textarea} id="textarea" required></textarea>
  </div>

  <div class="formChunk">
    <input type="checkbox" id="agree" required />
    <label for="agree">入力内容を確認しました</label>
  </div>

  <div class="formChunk turnstile-wrapper">
    <div class="cf-turnstile" data-sitekey={turnstileSiteKey}></div>
  </div>

  <div class="formChunk">
    <button type="submit" class="component-button"> 送信 </button>
  </div>
</form>

<style lang="sass">
  @use "../styles/config/color"
  @use "../styles/config/size"
  @use "../styles/config/media"
  @use "../styles/config/functions" as *

  #contactForm .container h2.title span
    font-size: unit(2)
    line-height: 1.6em

  p.message
    text-align: center

  form .formChunk
    display: flex
    gap: unit(4)
    margin-top: unit(1)
    @include media.sp
      flex-direction: column
      gap: 0

    label
      display: block
      min-width: unit(25)
      width: unit(25)
      user-select: none
      padding: unit(1) 0

      @include media.sp
        width: 100%

    input, select, textarea
      display: block
      width: unit(55)
      padding: unit(1) unit(2)
      border: unit(.25) solid color.$overlay-light

      @include media.sp
        width: 100%

    .radio-group
      display: flex
      flex-wrap: wrap
      gap: unit(1)

    input[type="radio"]
      display: none

      & + label
        display: inline-block
        min-width: unset
        width: fit-content
        height: unit(6)
        line-height: unit(5)
        border: unit(.25) solid color.$overlay-light
        cursor: pointer
        padding: 0 unit(3)
        border-radius: unit(5)

        &:hover
          border-color: color.$text-accent

      &:checked + label
        border-color: color.$text-accent
        background-color: rgba(color.$red, 0.5)

    textarea
      height: calc(12.8em + unit(2) + 4px)

    &:has(input[type="checkbox"])
      display: flex
      min-width: unset
      width: fit-content
      margin: unit(4) 0 0 calc(unit(25) + unit(4))
      gap: 0

      @include media.sp
        flex-direction: row
        margin: unit(4) 0 0 0

      input[type="checkbox"]
        aspect-ratio: 1/1
        width: unit(5)
        padding: 0
        margin-right: unit(2)
        background-color: color.$black
        position: relative
        cursor: pointer

        &:hover
          border-color: color.$text-accent

        &::before
          content: ""
          display: block
          width: 0
          height: 0
          transition: 0.2s
          position: absolute
          top: 50%
          left: 50%
          transform: translate(-50%, -50%)
          pointer-events: none
          background-color: color.$text-accent

        &:checked
          border-color: color.$text-accent
          background-color: rgba(color.$red, 0.5)

          &::before
            width: unit(2)
            height: unit(2)
            transition: 0.1s

      label
        line-height: unit(5)
        min-width: unset
        width: fit-content
        padding: 0
        cursor: pointer

  .formChunk:has(> button.component-button)
    margin-left: calc(unit(25) + unit(4))

    @include media.sp
      margin-left: 0

  button[type="submit"].component-button
    cursor: pointer
    margin: 0

  .turnstile-wrapper
    margin-left: calc(unit(25) + unit(4))
    @include media.sp
      margin-left: 0
</style>

<script>
  declare const turnstile: {
    getResponse: () => string | null
    render: (container: string | HTMLElement, options: {
      sitekey: string
      callback?: (token: string) => void
      'expired-callback'?: () => void
      'error-callback'?: (error: unknown) => void
      theme?: 'light' | 'dark' | 'auto'
    }) => void
  }

  const form = document.getElementById("form")
  if (!(form instanceof HTMLFormElement)) throw new Error("Form not found")

  const radioInputs = document.querySelectorAll('input[type="radio"]')
  const nameText = document.querySelector<HTMLElement>(".js-name-text")
  const autoCompleteMessage = document.querySelector<HTMLElement>(".js-auto-complete-message")
  const autoCompletes = JSON.parse(form.dataset.autocompletes || "[]")
  const inputNames = JSON.parse(form.dataset.inputNames || "{}")

  if (nameText) {
    radioInputs.forEach((input) => {
      input.addEventListener("change", (e) => {
        if (!(e.target instanceof HTMLInputElement)) return
        const target = e.target
        if (target.value.includes("おたより")) {
          nameText.textContent = "ラジオネーム"
        } else {
          nameText.textContent = "お名前"
        }

        const autoComplete = autoCompletes.find((ac) => ac.name === target.value)
        if (autoComplete?.message && autoCompleteMessage) {
          autoCompleteMessage.textContent = `(${autoComplete.message})`
        } else if (autoCompleteMessage) {
          autoCompleteMessage.textContent = ""
        }
      })
    })

    form.addEventListener("submit", async (e) => {
      e.preventDefault()
      const radioButtons = form.querySelectorAll(`input[name="${inputNames.select}"]`)
      const isAnyRadioSelected = Array.from(radioButtons).some(
        (radio) => radio instanceof HTMLInputElement && radio.checked
      )

      if (!isAnyRadioSelected) {
        alert("お問い合わせ内容を選択してください")
        return
      }

      const token = turnstile.getResponse()
      if (!token) {
        alert("認証を完了してください")
        return
      }

      try {
        const formData = new FormData(form)
        formData.append('_googleFormUrl', form.action)
        formData.append('cf-turnstile-response', token)
        const response = await fetch('/form-proxy', {
          method: 'POST',
          body: formData
        })

        if (response.ok) {
          alert("送信が完了しました")
          form.reset()
        } else {
          throw new Error("送信に失敗しました")
        }
      } catch (error) {
        alert("送信に失敗しました")
        console.error(error)
      }
    })
  }
</script>
